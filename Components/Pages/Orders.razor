@page "/orders"
@using CarRentingSystemBlazor.Components.Shared
@using CarRentingSystemBlazor.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Orders</PageTitle>

@if (orders == null)
{
    <p>Loading...</p>
}
else if (orders.Count == 0)
{
    <p>No orders available at the moment.</p>
}
else
{
    <div class="order-container">
        @foreach (var order in orders)
        {
            <RadzenCard Style="margin: 10px; width: 300px; display: inline-block;">
                <div style="padding: 10px;">
                    <h3 style="margin: 5px 0;">Order ID: @order.ID</h3>
                    <p style="margin: 5px 0;">Car: @order.Car.Mark @order.Car.Model</p>
                    <p style="margin: 5px 0;">Rental Start: @order.RentalStart.ToShortDateString()</p>
                    <p style="margin: 5px 0;">Rental End: @order.RentalEnd.ToShortDateString()</p>
                    <p style="margin: 5px 0;">Total Cost: @order.TotalRentalCost.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-US"))</p>
                    <p style="margin: 5px 0;">Status: @order.Status.ToString()</p>
                    <RadzenButton Text="Edit" Style="margin-top: 10px;" Click="@(() => OpenEditOrderDialog(order))" />
                    <RadzenButton Text="Delete" Style="margin-top: 10px; margin-left: 10px;" Click="@(() => DeleteOrder(order))" ButtonStyle="ButtonStyle.Danger" />
                </div>
            </RadzenCard>
        }
    </div>
}

<style>
    .order-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        padding: 20px;
    }

    .rz-card {
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .rz-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
</style>

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        orders = await DbContext.Orders
            .Include(o => o.Car) // Include related Car data
            .ToListAsync();
    }

    private async Task OpenEditOrderDialog(Order order)
    {
        var result = await DialogService.OpenAsync<EditOrderDialog>(
            "Edit Order",
            new Dictionary<string, object> { { "OrderToEdit", order } },
            new DialogOptions { Width = "400px", Height = "500px" }
        );

        if (result != null && (bool)result)
        {
            await LoadOrders(); // Refresh the orders list
        }
    }

    private async Task DeleteOrder(Order order)
    {
        var confirm = await DialogService.Confirm("Are you sure you want to delete this order?", "Delete Order", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirm == true)
        {
            DbContext.Orders.Remove(order);
            await DbContext.SaveChangesAsync();
            await LoadOrders();
        }
    }
}
