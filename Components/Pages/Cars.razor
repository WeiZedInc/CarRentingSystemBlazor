@page "/"
@using CarRentingSystemBlazor.Components.Shared
@using CarRentingSystemBlazor.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject DialogService DialogService
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Cars</PageTitle>

<RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    <RadzenLabel Text="Car garage" Style="font-size: 30px; color: black;" />

    @if (cars == null)
    {
        <p>Loading...</p>
    }
    else if (cars.Count == 0)
    {
        <p>No cars available at the moment.</p>
    }
    else
    {
        <div class="car-container">
            @foreach (var car in cars)
            {
                <RadzenCard Style="margin: 10px; width: 300px; display: inline-block;">
                    <div style="text-align: center; margin-bottom: 10px;">
                        <img src="@car.ImageURL" alt="@($"{car.Mark} {car.Model}")" style="width: 100%; height: 200px; object-fit: cover; border-radius: 10px;" />
                    </div>
                    <div style="padding: 10px;">
                        <h3 style="margin: 5px 0;">@car.Mark @car.Model</h3>
                        <p style="margin: 5px 0;">Available: @(car.Available ? "Yes" : "No")</p>
                        <p style="margin: 5px 0; font-weight: bold;">
                            Price per day: @car.PriceForOneDayRent.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-US"))
                        </p>
                        @if (car.Available)
                        {
                            <RadzenButton Text="Make Order" Style="margin-top: 10px;" Click="@(() => OpenOrderDialog(car))" />
                        }
                    </div>
                </RadzenCard>
            }
        </div>
    }
</RadzenStack>

<style>
    .car-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        padding: 20px;
    }

    .rz-card {
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .rz-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .rz-card img {
            border-radius: 10px 10px 0 0;
        }

</style>
@code {
    private List<Car> cars;

    protected override async Task OnInitializedAsync()
    {
        cars = await DbContext.Cars.ToListAsync();
    }

    private async Task OpenOrderDialog(Car car)
    {
        var user = HttpContextAccessor.HttpContext?.User;
        if (user?.Identity?.IsAuthenticated != true || HttpContextAccessor.HttpContext == default)
        {
            NavigationManager.NavigateTo("Account/Login");
            return;
        }

        var result = await DialogService.OpenAsync<OrderDialog>(
            "Create Order",
            new Dictionary<string, object> { { "SelectedCar", car } },
            new DialogOptions { Width = "400px", Height = "400px" }
        );

        if (result != null && (bool)result)
        {
            // Optionally refresh data or display a success message
            await LoadCars();
        }
    }

    private async Task LoadCars()
    {
        cars = await DbContext.Cars.ToListAsync();
        StateHasChanged();
    }
}
